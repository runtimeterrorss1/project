import pandas as pd
from sklearn.model_selection import train_test_split, RandomizedSearchCV
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
import mlflow
import mlflow.sklearn

df = pd.read_csv('D:/1. BS CS FALL 2023/MLOps/Project/project/dummy_sensor_data.csv', parse_dates=['Timestamp'])
# print(df.head(10))
# df['Timestamp'] = pd.to_datetime(df['Timestamp'])
df['Hours'] = df['Timestamp'].dt.hour
df['Date'] = df['Timestamp'].dt.day
df['Month'] = df['Timestamp'].dt.month
# print(df.head(10))
# print(df[['Timestamp', 'Hours', 'Month']])
X = df[['Hours', 'Date', 'Month', 'Machine_ID', 'Sensor_ID']]
y = df['Reading']

#standard Scalar for scaling -> numeric
#one hot encoder for encoding -> categorical
#numeric cols
cols1= ['Hours', 'Date', 'Month']
#categorical cols
cols2= ['Machine_ID', 'Sensor_ID']

scaled = StandardScaler()
encoded= OneHotEncoder(handle_unknown='ignore')

preprocessing = ColumnTransformer(
    transformers=[
        ('num', scaled, cols1),
        ('cat', encoded, cols2)
    ])
X_transformed = preprocessing.fit_transform(X)
X_df = pd.DataFrame(X, columns=['Hours', 'Date', 'Month', 'Machine_ID', 'Sensor_ID'])

X_train, X_val, y_train, y_val = train_test_split(X_df, y, test_size=0.2, random_state=42)

model = RandomForestRegressor()
pipeline = Pipeline(steps=[
    ('preprocessing', preprocessing),
    ('model', model)
])

pipeline.fit(X_train, y_train)
y_pred = pipeline.predict(X_val)
mse = mean_squared_error(y_val, y_pred)
print(f'Mean Squared Error on Validation Set: {mse}')




hyperparamRem = {
    'model__n_estimators': [50, 100, 150],
    'model__max_depth': [None, 10, 20, 30],
    'model__min_samples_split': [2, 5, 10],
    'model__min_samples_leaf': [1, 2, 4]
}


random_search = RandomizedSearchCV(
    pipeline,
    param_distributions=hyperparamRem,
    n_iter=10,
    scoring='neg_mean_squared_error',
    cv=3,
    verbose=1,
    n_jobs=-1,
    random_state=42
)
with mlflow.start_run():
    # Fit the model with hyperparameter tuning
    random_search.fit(X_train, y_train)

    # Log parameters
    mlflow.log_params(random_search.best_params_)

    # Make predictions on the validation set
    y_val_pred = random_search.predict(X_val)

    # Log metrics
    mse = mean_squared_error(y_val, y_val_pred)
    mlflow.log_metric("mse", mse)

    # Save the model
    mlflow.sklearn.log_model(random_search.best_estimator_, "random_forest_model")
